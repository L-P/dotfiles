#!/usr/bin/env php
<?php
/*
 * Fuzzy docker shell.
 * Usage: ds FUZZYSTR
 *
 * Run a shell inside a docker container found using fuzzy string matching.
 */

exit(main($argc, $argv));

function main($argc, array $argv)
{
    if ($argc < 2) {
        fwrite(STDERR, "No fuzz given.\n");
        return 1;
    }

    $fuzz = implode('_', array_slice($argv, 1));

    $container = fuzzyGetContainer($fuzz);
    if ($container === null) {
        fwrite(STDERR, "No container found.\n");
        return 1;
    }

    $cmd = getDockerShellCommand($container);
    echo implode(' ', $cmd), "\n";
    pcntl_exec($cmd[0], array_slice($cmd, 1));

    assert('false /* unreachable */');
}

/**
 * @return string *NIX user name.
 */
function getCurrentUser()
{
    return posix_getpwuid(posix_getuid())['name'];
}

/**
 * Return parsed configuration for a given container.
 *
 * The configuration file is found at ~/.ds.json.
 * Sample:
 *  {
 *    "web_database_1": { "user": "postgres" },
 *    "web_mailer_1": { "noLogin": true }
 *  }
 *
 *  Options:
 *    -user: login as user using /bin/login
 *    -noLogin: use /bin/sh instead of /bin/login
 *
 * @param string container docker container name.
 * @return stdClass[]
 */
function getConfForContainer($container)
{
    $home = posix_getpwuid(posix_getuid())['dir'];
    $path = $home . '/.ds.json';
    $empty = new \stdClass();

    if (!file_exists($path)) {
        return $empty;
    }

    $conf = json_decode(file_get_contents($path), true);
    if (!is_array($conf)) {
        throw new \Exception("Invalid JSON in `$path`.");
    }

    return array_key_exists($container, $conf)
        ? (object) $conf[$container]
        : $empty
    ;
}

/**
 * @param string container docker container name.
 * @return string[] for use in pcntl_exec
 */
function getDockerShellCommand($container)
{
    $baseArgs = [
        exec('which docker'),
        'exec', '-it',
        $container
    ];

    $conf = getConfForContainer($container);
    if (!empty($conf->noLogin)) {
        return array_merge($baseArgs, ['/bin/sh']);
    } else {
        $user = empty($conf->user) ? getCurrentUser() : $conf->user;
        return array_merge($baseArgs, [
            '/bin/login', '-f', $user,
            'TERM=xterm'
        ]);
    }
}

/**
 * @param string $fuzz
 * @return string|null closest docker container name or null if none found.
 */
function fuzzyGetContainer($fuzz)
{
    $names = getRunningContainerNames();
    if (count($names) <= 0) {
        return null;
    }

    $distance = array_combine($names, array_map(function ($name) use ($fuzz) {
        return levenshtein($fuzz, $name, 1, 3, 3);
    }, $names));

    asort($distance, SORT_NUMERIC);
    return key($distance);
}

/// @return string[]
function getRunningContainerNames()
{
    exec('docker ps | tail -n +2 | awk "{print \\$NF}"', $out);
    return $out;
}
