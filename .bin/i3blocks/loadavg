#!/usr/bin/env php
<?php declare(strict_types=1);
/**
 * Sample output:
 *   0.36 0.61 0.69 (12/10/67/10)
 *
 * Explanation:
 *    ld1  ld5 ld15 (us/sy/id/wa)
 * pango markup required
 * normal < 50%, orange < 100%, red
 * % depends on CPU count (eg. a load of 8 is 100Â % if you have 2 CPUs with 4
 * cores each)
 */

exit(main());

function main(): int
{
    echo get_load(), ' ', get_stat();
    return 0;
}

function get_load(): string
{
    $procs = numprocs();

    return implode(' ', array_map(
        function ($load) use ($procs) {
            return template($load, $procs, '%.2f');
        },
        loadavg()
    ));
}

function template($v, $max, string $format, $weight = 1.0): string
{
    $templates = [
        $format,
        "<span color='yellow'>$format</span>",
        "<span color='orange'>$format</span>",
        "<span color='red'>$format</span>",
    ];

    // If weight is negative, it means the higher the v the better, invert colors
    $ratio = $weight > 0
        ? ($v / $max) * $weight
        : (($max - $v) / $max) * -$weight
    ;

    $index = max(0, floor(min($ratio, 1.0) * (count($templates) - 1)));

    return sprintf($templates[$index], $v);
}

function get_stat(): string
{
    $stat = array_filter(
        explode(' ', shell_exec('vmstat | tail -n 1')),
        'strlen'
    );

    list($us, $sy, $id, $wa) = array_slice($stat, 12, 4);

    return sprintf(
        '(%s/%s/%s/%s)',
        template($us, 100, '%d', 1.25),
        template($sy, 100, '%d', 1.25),
        template($id, 100, '%d', -1.25),
        template($wa, 100, '%d', 1.25)
    );
}

function loadavg(): array
{
    $avg = explode(' ', file_get_contents('/proc/loadavg'));
    return array_map('floatval', array_slice($avg, 0, 3));
}

function numprocs(): int
{
    $lscpu = array_filter(
        explode("\n", shell_exec('lscpu --parse')),
        function (string $v) {
            return strlen($v) > 0 && $v[0] !== '#';
        }
    );

    return count($lscpu);
}
