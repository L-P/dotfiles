#!/usr/bin/env php
<?php declare(strict_types=1);

exit(main());

function main(): int
{
    $iface = get_iface();
    $last = load_last($iface);
    $cur = load_cur($iface);
    save_last($iface, $cur);

    echo get_diff($last, $cur);

    return 0;
}

function get_diff(Stats $last, Stats $cur): string
{
    // Allow using any interval by dividing by dt
    $dt = $cur->time - $last->time;
    $dtx = (int) round(($cur->tx - $last->tx) / $dt);
    $drx = (int) round(($cur->rx - $last->rx) / $dt);

    return sprintf(
        "↓↑ %s/s %s/s",
        humanize($drx),
        humanize($dtx)
    );
}

function get_save_path($iface): string
{
    return "/dev/shm/bandwidth-$iface";
}

function save_last(string $iface, Stats $cur)
{
    $savePath = get_save_path($iface);
    if (file_exists($savePath) && !is_writable($savePath)) {
        exit("not writable: $savePath");
    }

    $ok = file_put_contents($savePath, json_encode($cur));
    if (!$ok) {
        exit("could not write: $savePath");
    }
}

function get_iface(): string
{
    return trim(shell_exec("ip route | awk '/^default/ { print $5 ; exit }'"));
}

function load_last($iface): Stats
{
    $savePath = get_save_path($iface);
    if (!file_exists($savePath)) {
        return load_cur($iface);
    }

    if (!is_file($savePath)) {
        exit("not a file: $savePath");
    }

    if (!is_readable($savePath)) {
        exit("not readable: $savePath");
    }

    $data = json_decode(file_get_contents($savePath));
    return new Stats(
        (float) $data->time ?? 0.0,
        (int) $data->rx ?? 0,
        (int) $data->tx ?? 0
    );
}

function load_cur($iface): Stats
{
    $rx = (int) trim(file_get_contents("/sys/class/net/$iface/statistics/rx_bytes"));
    $tx = (int) trim(file_get_contents("/sys/class/net/$iface/statistics/tx_bytes"));

    return new Stats(microtime(true), $rx, $tx);
}

class Stats
{
    public $time;
    public $rx;
    public $tx;

    public function __construct(float $time, int $rx, int $tx)
    {
        $this->time = $time;
        $this->rx = $rx;
        $this->tx = $tx;
    }
}

function humanize(int $size): string
{
    $sign = $size >= 0 ? '' : '-';
    $size = abs($size);
    $units = ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'ZiB', 'YiB'];
    $i = min(count($units) -1, (int) floor(log($size, 1024)));
    return sprintf(
        '%s%d %s',
        $sign,
        round($size / pow(1024, $i)),
        $units[$i]
    );
}
