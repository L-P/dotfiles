unlock() {
    /usr/bin/keychain --agents gpg 0889A1CD
    source "$HOME/.keychain/$HOST-sh-gpg"
}

# Start SSH agent if not connected via SSH.
if [ "root" != "$(whoami)" -a -z "$SSH_CLIENT" -a -z "$SSH_TTY" ]; then
    /usr/bin/keychain --quiet "$USER@$HOST"
    source "$HOME/.keychain/$HOST-sh"
fi

export PATH=~/.bin:$PATH
export EDITOR=vim # Scarcely used (see `update-alternatives --config editor`)
export LC_ALL=C.UTF-8

# Nicer less by default
export LESS='-RFXS -x4'
export PAGER='less'
export MANPAGER='less'

# 256 colors, except on TTY.
if [ "$TERM" = "screen" ]; then
    export TERM='screen-256color'
elif [ "$TERM" != "linux" ]; then
    export TERM='xterm-256color'
fi

# Color aliases
alias grep='grep --color=auto'
alias tree='tree -C'

# Aliases
alias ls='ls --group-directories-first --color -v'
alias ll='ls -vlh'
alias la='ll -va'
alias mkdir='mkdir -pv'
alias rm='rm --preserve-root'
alias gd='git diff -M -C'
alias gds='git diff -M -C --staged'
alias gs='git status --short'
alias py='python3'
alias ripit='ripit -o /dev/shm/ripit -c 2 -q 8' # FLAC @ max comp.
alias json='json_reformat | pygmentize -l json'
alias cdr='cd $(git rev-parse --show-toplevel)'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias v='vagrant'
alias ap='ansible-playbook --vault-password-file=vault'
alias ave='ansible-vault edit --vault-password-file=vault'
alias optipng='optipng -strip all -o7'
alias ds='webdev-toolbox docker-shell'
alias run='webdev-toolbox runner'

# tmux for the lazy.
t() {
    tmux a -t "$1" || tmux new -s "$1"
}

# Nicer du (ncdu is nice too).
duf() {
    du -csh -- "$@" | sort -rh
}

# Handy grep aliases, since ack sucks.
g() {
	grep --color=always -EHnr --exclude-dir='.svn' --exclude-dir='.git' "$*" . | "$PAGER" ;
}
gi() {
	grep --color=always -EHnri --exclude-dir='.svn' --exclude-dir='.git' "$*" . | "$PAGER" ;
}

# Same aliases for the faster git grep.
gg() {
	git grep --color=always -En "$@"
}
ggi() {
	git grep --color=always -Eni "$@"
}

# Find aliases
f() {
	find . -iname "*$**"
}
ff() {
	find . -type "f" -iname "*$**"
}
fd() {
	find . -type d -iname "*$**"
}

# Make a git repo with an empty commit
mkrepo() {
    (
        mkdir "$1"
        pushd "$1"
        git init
        git ci --allow-empty -m "Initial commit"
        popd ..
    ) > /dev/null
}

# List all git repositories.
repos() {
    find . -type d -name .git | sed -r 's/(\/\.git)$//'
}

# Run a git command on all git repositories found in the current dir and subdirs.
mgit() {
    (
    for repo in $(repos); do
        pushd "$repo" > /dev/null
        printf "\n%s\n" "$repo"
        git "$@"
        popd > /dev/null
    done
    ) 2>&1 | $(git config core.pager || echo 'less')
}

# Update (fetch-only) all repositories in current dir and subsdirs.
update_repos() {
    mgit remote update --prune
}

# Unmount a SSHFS.
ufs() {
    fusermount -u "$1"
}

# Mount a SSHFS.
fs() {
    local src="$1"
    local dest="$2"

    [ -d "$dest" ] || mkdir "$dest"

    ufs "$dest" > /dev/null
    sshfs "$src" "$dest"
}

# Examine a x509 cert.
cert() {
    openssl x509 -in "$1" -text -noout
}


hl() {
    hledger is -p 'this month'
    printf "-------------------\n-------------------\n"
    hledger bs -p 'this month'
}

hlp() {
    hledger is -p "$*"
    printf "-------------------\n-------------------\n"
    hledger bs -p "$*"
}

# Convert a SVG to PNG
# svg2png FILE WIDTH
svg2png() {
    inkscape --export-png="$1.png" --export-width="$2" --export-background-opacity=0 --without-gui "$1"
}

# Display time bewteen keyframes
# keyframes FILE
keyframes () {
    ffprobe -of compact -show_packets -select_streams v "$1" | grep 'K$' |\
        awk 'BEGIN{FS="|";last=0}{split($5,a,"="); print a[2]-last; last=a[2]}'
}
